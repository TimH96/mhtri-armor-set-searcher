{"version":3,"sources":["../../data-provider/models/equipment/EquipmentSkills.ts","../../data-provider/data-provider.module.ts","../../helper/range.helper.ts","../../data-provider/models/equipment/EquipmentCategory.ts","../../data-provider/models/equipment/UserCharmList.ts","../../helper/html.helper.ts","../ui/charms.component.ts","../ui/navbar.component.ts","../ui/picker.component.ts","../../scorer/models/ArmorEvaluation.ts","../../searcher/models/ArmorSet.ts","../../data-provider/models/equipment/ArmorType.ts","../../data-filter/data-filter.module.ts","../../scorer/scorer.module.ts","../../scorer/models/DecoEvaluation.ts","../../scorer/models/DecoMinSlotMap.ts","../../searcher/searcher.module.ts","../ui/global-settings.component.ts","../ui/search-results.component.ts","../ui/search-controls.component.ts","index.ts"],"names":[],"mappings":"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","file":"pages.d5f4c1a5.js","sourceRoot":"..\\src\\app\\pages","sourcesContent":["import GameID from '../GameId'\r\nimport Skill from '../skills/Skill'\r\n\r\nexport default class EquipmentSkills extends Map<GameID, Skill> {\r\n  get (key: GameID): Skill {\r\n    return super.get(key) || 0\r\n  }\r\n\r\n  add (key: GameID, val: Skill) {\r\n    this.set(key, val + this.get(key))\r\n  }\r\n\r\n  addSkills (m: EquipmentSkills) {\r\n    for (const [k, v] of m) {\r\n      this.add(k, v)\r\n    }\r\n  }\r\n\r\n  substract (key: GameID, val: Skill) {\r\n    this.set(key, val + this.get(key))\r\n  }\r\n\r\n  substractSkills (m: EquipmentSkills) {\r\n    for (const [k, v] of m) {\r\n      this.substract(k, v)\r\n    }\r\n  }\r\n\r\n  multiply (factor: number) {\r\n    for (const [k, v] of this) {\r\n      this.set(k, v * factor)\r\n    }\r\n  }\r\n}\r\n","import ArmorPiece from './models/equipment/ArmorPiece'\r\nimport Decoration from './models/equipment/Decoration'\r\nimport EquipmentSkills from './models/equipment/EquipmentSkills'\r\nimport GameID from './models/GameId'\r\nimport SkillActivation from './models/skills/SkillActivation'\r\nimport SkillActivationMap from './models/skills/SkillActivationMap'\r\nimport Skill from './models/skills/Skill'\r\nimport SkillNameMap from './models/skills/SkillNameMap'\r\n\r\nconst MAX_RARITY = 7\r\n\r\nconst TORSO_UP_ID = 83\r\n\r\nconst DUMMY_PIECE: ArmorPiece = {\r\n  name: 'None',\r\n  type: -1,\r\n  defense: { base: 0, max: 0, maxLr: 0 },\r\n  resistance: [0, 0, 0, 0, 0],\r\n  category: -1,\r\n  slots: 0,\r\n  rarity: 0,\r\n  skills: new EquipmentSkills(),\r\n}\r\n\r\n/** fetch from data directory */\r\nconst getRawData = async (url: string) => {\r\n  return (await fetch(url)).json()\r\n}\r\n\r\n/** fetch and parse generic equipment data */\r\nconst getDataWithTransformedSkillMap = async (url: string): Promise<{skills: EquipmentSkills}[]> => {\r\n  const raw = await getRawData(url)\r\n  return raw.map((rawX: any) => {\r\n    const skillMap: EquipmentSkills = new EquipmentSkills()\r\n    for (const x in rawX.skills) {\r\n      const skill: Skill = rawX.skills[x]\r\n      skillMap.set(parseInt(x), skill)\r\n    }\r\n    return {\r\n      ...rawX,\r\n      skills: skillMap,\r\n    }\r\n  })\r\n}\r\n\r\n/** get a list of all head armor pieces */\r\nconst getHead = async (): Promise<ArmorPiece[]> => {\r\n  return getDataWithTransformedSkillMap('./head.json') as unknown as ArmorPiece[]\r\n}\r\n\r\n/** get a list of all chest armor pieces */\r\nconst getChest = async (): Promise<ArmorPiece[]> => {\r\n  return getDataWithTransformedSkillMap('./chest.json') as unknown as ArmorPiece[]\r\n}\r\n\r\n/** get a list of all arms armor pieces */\r\nconst getArms = async (): Promise<ArmorPiece[]> => {\r\n  return getDataWithTransformedSkillMap('./arms.json') as unknown as ArmorPiece[]\r\n}\r\n\r\n/** get a list of all waist armor pieces */\r\nconst getWaist = async (): Promise<ArmorPiece[]> => {\r\n  return getDataWithTransformedSkillMap('./waist.json') as unknown as ArmorPiece[]\r\n}\r\n\r\n/** get a list of all legs armor pieces */\r\nconst getLegs = async (): Promise<ArmorPiece[]> => {\r\n  return getDataWithTransformedSkillMap('./legs.json') as unknown as ArmorPiece[]\r\n}\r\n\r\n/** get a list of all decorations */\r\nconst getDecorations = async (): Promise<Decoration[]> => {\r\n  return getDataWithTransformedSkillMap('./decorations.json') as unknown as Decoration[]\r\n}\r\n\r\n/** get a mapping of internal id to name for all skills */\r\nconst getSkillNameMap = async (): Promise<SkillNameMap> => {\r\n  const raw = await getRawData('./skill-names.json')\r\n  const map: Map<GameID, string> = new Map()\r\n  for (const id in raw) {\r\n    map.set(parseInt(id), raw[id])\r\n  }\r\n  return map\r\n}\r\n\r\n/** get a list of skill category names, as used in the UI */\r\nconst getSkillCategories = async (): Promise<string[]> => {\r\n  return getRawData('./skill-categories.json')\r\n}\r\n\r\n/** get a mapping of internal id of skill to all activations (positive and negative) of that skill */\r\nconst getSkillActivationMap = async (): Promise<SkillActivationMap> => {\r\n  const raw = await getRawData('./skills.json')\r\n  const map: Map<GameID, SkillActivation[]> = new Map()\r\n  for (const id in raw) {\r\n    const parsedId = parseInt(id)\r\n    map.set(\r\n      parsedId,\r\n      raw[id].map((activation: any) => {\r\n        return {\r\n          ...activation,\r\n          requiredSkill: parsedId,\r\n        }\r\n      }),\r\n    )\r\n  }\r\n  return map\r\n}\r\n\r\nexport {\r\n  MAX_RARITY,\r\n  TORSO_UP_ID,\r\n  DUMMY_PIECE,\r\n  getHead,\r\n  getChest,\r\n  getArms,\r\n  getWaist,\r\n  getLegs,\r\n  getDecorations,\r\n  getSkillNameMap,\r\n  getSkillCategories,\r\n  getSkillActivationMap,\r\n}\r\n","export const range = (start: number, end: number) => Array.from({ length: (end - start) }, (_, k) => k + start)\r\n","/* eslint-disable no-unused-vars */\r\nenum EquipmentCategory {\r\n  HEAD = 0,\r\n  CHEST = 1,\r\n  ARMS = 2,\r\n  WAIST = 3,\r\n  LEGS = 4,\r\n  CHARM = 5,\r\n  WEAPON = 6,\r\n}\r\n\r\nexport default EquipmentCategory\r\n","import { range } from '../../../helper/range.helper'\r\nimport SkillNameMap from '../skills/SkillNameMap'\r\nimport Charm from './Charm'\r\nimport EquipmentCategory from './EquipmentCategory'\r\nimport EquipmentSkills from './EquipmentSkills'\r\nimport Slots from './Slots'\r\n\r\nexport default class UserCharmList {\r\n  // eslint-disable-next-line no-use-before-define\r\n  private static _instance: UserCharmList\r\n\r\n  private list: Charm[]\r\n\r\n  private constructor () {\r\n    this.list = []\r\n  }\r\n\r\n  public static get Instance () {\r\n    return this._instance || (this._instance = new this())\r\n  }\r\n\r\n  public static getCharmName (skills: EquipmentSkills, slots: Slots, skillNames: SkillNameMap): string {\r\n    const skillStrings = Array.from(skills.entries())\r\n      .map(s => `${skillNames.get(s[0])}:${s[1]}`)\r\n    const slotString = slots !== 0 ? `${slots} Slots` : ''\r\n\r\n    return [...skillStrings, slotString].join(' ').trim()\r\n  }\r\n\r\n  /** get the list of charms */\r\n  get () {\r\n    return this.list\r\n  }\r\n\r\n  /** adds a given charm to list */\r\n  add (charm: Charm): number {\r\n    return this.list.push(charm)\r\n  }\r\n\r\n  /** removes charm at specified index from list */\r\n  remove (index: number) {\r\n    this.list = this.list.filter((_, i) => i !== index)\r\n  }\r\n\r\n  /** serializes charm list as csv */\r\n  serialize (skillNames: SkillNameMap): string {\r\n    return this.list.map((charm) => {\r\n      const s = []\r\n\r\n      const skillArray = Array.from(charm.skills.entries())\r\n      skillArray.forEach(([sId, sVal]) => {\r\n        s.push(`${skillNames.get(sId)},${sVal},`)\r\n      })\r\n\r\n      const amountOfSkills = skillArray.length\r\n      // eslint-disable-next-line no-unused-vars\r\n      for (const _ in range(amountOfSkills, 2)) {\r\n        s.push(',,')\r\n      }\r\n\r\n      s.push(`${charm.slots}`)\r\n\r\n      return s.join('')\r\n    }).join('\\n')\r\n  }\r\n\r\n  /** populate charm list from csv */\r\n  deserialize (csv: string, skillNames: SkillNameMap): Charm[] {\r\n    const newList = []\r\n\r\n    for (const charm of csv.split('\\n')) {\r\n      const spl = charm.split(',')\r\n\r\n      const slots = parseInt(spl[4])\r\n      const skills = [[0, 1], [2, 3]]\r\n        .filter(([_, j]) => !isNaN(parseInt(spl[j])))\r\n        .map(([i, j]) => {\r\n          const name = spl[i]\r\n\r\n          const id = Array.from(skillNames.entries())\r\n            .find(([_, n]) => {\r\n              return n === name\r\n            })![0]\r\n\r\n          // build skill model\r\n          const skill = {\r\n            name,\r\n            points: parseInt(spl[j]),\r\n            id,\r\n          }\r\n          return skill\r\n        })\r\n\r\n      const skillMap: EquipmentSkills = new EquipmentSkills(skills.map((skill) => {\r\n        return [skill.id, skill.points]\r\n      }))\r\n      const newCharm: Charm = {\r\n        name: UserCharmList.getCharmName(skillMap, slots as Slots, skillNames),\r\n        category: EquipmentCategory.CHARM,\r\n        slots: slots as Slots,\r\n        rarity: 0,\r\n        skills: skillMap,\r\n      }\r\n\r\n      newList.push(newCharm)\r\n    }\r\n\r\n    this.list = newList\r\n    return newList\r\n  }\r\n}\r\n","export const htmlToElement = (html: string): Node => {\r\n  const template = document.createElement('template')\r\n  html = html.trim()\r\n  template.innerHTML = html\r\n  return template.content.firstChild as Node\r\n}\r\n","import SkillActivationMap from '../../data-provider/models/skills/SkillActivationMap'\r\nimport SkillNameMap from '../../data-provider/models/skills/SkillNameMap'\r\nimport Charm from '../../data-provider/models/equipment/Charm'\r\nimport Skill from '../../data-provider/models/skills/Skill'\r\nimport UserCharmList from '../../data-provider/models/equipment/UserCharmList'\r\nimport { htmlToElement } from '../../helper/html.helper'\r\nimport Slots from '../../data-provider/models/equipment/Slots'\r\nimport EquipmentCategory from '../../data-provider/models/equipment/EquipmentCategory'\r\nimport GameID from '../../data-provider/models/GameId'\r\nimport { range } from '../../helper/range.helper'\r\nimport EquipmentSkills from '../../data-provider/models/equipment/EquipmentSkills'\r\n\r\nconst saveToStorage = (skillNames: SkillNameMap) => {\r\n  window.localStorage.setItem('charms', UserCharmList.Instance.serialize(skillNames))\r\n}\r\n\r\nconst getFromStorage = () => {\r\n  return window.localStorage.getItem('charms')\r\n}\r\n\r\nconst validSkill = (id: GameID, points: Skill) => {\r\n  return points !== 0 && id !== -1\r\n}\r\n\r\nconst removeTableElement = (index: number) => {\r\n  const ele = document.getElementsByClassName(`charm-${index}`)[0]\r\n  ele.remove()\r\n}\r\n\r\nconst populateCharmsFromCSV = (csv: string, skillNames: SkillNameMap) => {\r\n  UserCharmList.Instance.deserialize(csv, skillNames)\r\n  UserCharmList.Instance.get().forEach((charm, i) => {\r\n    addTableElement(charm, i, skillNames)\r\n  })\r\n}\r\n\r\nconst purgeTable = () => {\r\n  const entries = document.getElementsByClassName('charm-table-ele')\r\n  for (const entry of Array.from(entries)) {\r\n    entry.remove()\r\n  }\r\n}\r\n\r\nconst addTableElement = (charm: Charm, index: number, skillNames: SkillNameMap) => {\r\n  const ele = htmlToElement(`<tr class=\"charm-table-ele charm-${index}\" data-index=\"${index}\"></tr>`)\r\n\r\n  // get real table elements\r\n  for (const skill of Array.from(charm.skills.keys())) {\r\n    ele.appendChild(htmlToElement(`<td>${skillNames.get(skill)}</td>`))\r\n    ele.appendChild(htmlToElement(`<td>${charm.skills.get(skill)}</td>`))\r\n  }\r\n\r\n  // get placeholder table elements\r\n  const amountOfSkills = Array.from(charm.skills.keys()).length\r\n  // eslint-disable-next-line no-unused-vars\r\n  for (const _ in range(amountOfSkills, 2)) {\r\n    ele.appendChild(htmlToElement('<td></td>'))\r\n    ele.appendChild(htmlToElement('<td></td>'))\r\n  }\r\n\r\n  // get slots and delete\r\n  ele.appendChild(htmlToElement(`<td>${charm.slots}</td>`))\r\n  const d = htmlToElement('<td class=\"charm-delete\">X</td>')\r\n  d.addEventListener('click', () => removeCharm(index, skillNames))\r\n  ele.appendChild(d)\r\n\r\n  // add final element\r\n  const tbody = document.getElementById('charm-table')!.children[0]\r\n  tbody.appendChild(ele)\r\n}\r\n\r\nconst addCharm = (charm: Charm, skillNames: SkillNameMap) => {\r\n  const i = UserCharmList.Instance.add(charm)\r\n  addTableElement(charm, i - 1, skillNames)\r\n  saveToStorage(skillNames)\r\n}\r\n\r\nconst removeCharm = (index: number, skillNames: SkillNameMap) => {\r\n  UserCharmList.Instance.remove(index)\r\n  removeTableElement(index)\r\n  saveToStorage(skillNames)\r\n}\r\n\r\nconst onExportClick = (skillNames: SkillNameMap) => {\r\n  const str = UserCharmList.Instance.serialize(skillNames)\r\n  const blob = new Blob([str], { type: 'text/plain' })\r\n  const a = document.getElementById('charm-download') as HTMLAnchorElement\r\n  const url = window.URL.createObjectURL(blob)\r\n\r\n  a.href = url\r\n  a.download = 'charms.csv'\r\n  a.click()\r\n}\r\n\r\nconst onImportClick = (e: MouseEvent) => {\r\n  e.preventDefault()\r\n\r\n  const inp = document.getElementById('charm-upload') as HTMLInputElement\r\n  inp.click()\r\n}\r\n\r\nconst onFileUploaded = (skillNames: SkillNameMap) => {\r\n  const inp = document.getElementById('charm-upload') as HTMLInputElement\r\n\r\n  if (!inp.files) {\r\n    return\r\n  }\r\n\r\n  const file = inp.files[0]\r\n  file.text().then((text) => {\r\n    try {\r\n      UserCharmList.Instance.deserialize(text, skillNames)\r\n      saveToStorage(skillNames)\r\n      purgeTable()\r\n      UserCharmList.Instance.get().forEach((charm, i) => {\r\n        addTableElement(charm, i, skillNames)\r\n      })\r\n    } catch {\r\n      alert('Could not process file')\r\n    }\r\n  })\r\n}\r\n\r\nconst onAddClick = (skillNames: SkillNameMap) => {\r\n  // parse data\r\n  const slots = parseInt((document.getElementById('charm-slots') as HTMLSelectElement).value)\r\n  const skills = [1, 2].map((x) => {\r\n    return {\r\n      id: parseInt((document.getElementById(`charm-skill-${x}-name`) as HTMLSelectElement).value),\r\n      points: parseInt((document.getElementById(`charm-skill-${x}-points`) as HTMLSelectElement).value),\r\n    }\r\n  })\r\n\r\n  // return if charm invalid\r\n  if (slots === 0 && !skills.some(s => validSkill(s.id, s.points))) {\r\n    return\r\n  }\r\n\r\n  // map to model\r\n  const skillsMap = new EquipmentSkills(skills\r\n    .filter(s => validSkill(s.id, s.points))\r\n    .map(s => [s.id, s.points]))\r\n  const charm: Charm = {\r\n    name: UserCharmList.getCharmName(skillsMap, slots as Slots, skillNames),\r\n    slots: slots as Slots,\r\n    category: EquipmentCategory.CHARM,\r\n    rarity: 0,\r\n    skills: skillsMap,\r\n  }\r\n\r\n  // add\r\n  addCharm(charm, skillNames)\r\n}\r\n\r\nconst attachControlListeners = (skillNames: SkillNameMap) => {\r\n  document.getElementById('charm-add')!.addEventListener('click', () => onAddClick(skillNames))\r\n  document.getElementById('charm-export')!.addEventListener('click', () => onExportClick(skillNames))\r\n  document.getElementById('charm-import')!.addEventListener('click', (e) => onImportClick(e))\r\n  document.getElementById('charm-upload')!.addEventListener('change', () => onFileUploaded(skillNames))\r\n}\r\n\r\nconst populatePointsPickers = () => {\r\n  const pickers = document.getElementsByClassName('charm-points-pick')\r\n  for (const picker of Array.from(pickers)) {\r\n    for (const amount of range(-10, 11).reverse()) {\r\n      picker.appendChild(htmlToElement(`\r\n        <option ${amount === 0 ? 'selected=\"selected\"' : ''} value=\"${amount}\">${amount}</option>\r\n      `))\r\n    }\r\n  }\r\n}\r\n\r\nconst populateSkillsPickers = (\r\n  skillNames: SkillNameMap,\r\n  skillActivation: SkillActivationMap,\r\n  skillCategories: string[],\r\n) => {\r\n  const pickers = document.getElementsByClassName('charm-skill-pick')\r\n  for (const picker of Array.from(pickers)) {\r\n    // make optgroup for each category\r\n    const optGroups = skillCategories.map((category, i) => {\r\n      return htmlToElement(`\r\n        <optgroup label=\"${category}\" data-category=\"${i}\"></optgroup>\r\n      `)\r\n    })\r\n\r\n    // append skill options to optgroup\r\n    skillActivation.forEach((activationList) => {\r\n      // continue if skill cant be activated -- Torso Up\r\n      if (activationList.length === 0) {\r\n        return\r\n      }\r\n\r\n      const dummyActivation = activationList[0]\r\n      const category = dummyActivation.category\r\n      const skill = dummyActivation.requiredSkill\r\n      const name = skillNames.get(skill)\r\n\r\n      const ele = htmlToElement(`\r\n        <option value=\"${skill}\" data-skill=\"${skill}\">${name}</option>\r\n      `)\r\n      optGroups[category].appendChild(ele)\r\n    })\r\n\r\n    // add default\r\n    optGroups.unshift(htmlToElement(`\r\n      <option value=\"-1\" data-skill=\"-1\">None</option>\r\n    `))\r\n\r\n    // add elements and select default\r\n    picker.append(...optGroups)\r\n    picker.getElementsByTagName('option')[0].selected = true\r\n  }\r\n}\r\n\r\nconst populateCharmPicker = (\r\n  skillNames: SkillNameMap,\r\n  skillActivation: SkillActivationMap,\r\n  skillCategories: string[],\r\n) => {\r\n  populatePointsPickers()\r\n  populateSkillsPickers(skillNames, skillActivation, skillCategories)\r\n}\r\n\r\nexport const renderCharmPicker = (\r\n  skillNames: SkillNameMap,\r\n  skillActivation: SkillActivationMap,\r\n  skillCategories: string[],\r\n) => {\r\n  populateCharmPicker(skillNames, skillActivation, skillCategories)\r\n  attachControlListeners(skillNames)\r\n\r\n  const savedCharms = getFromStorage()\r\n  if (savedCharms) {\r\n    populateCharmsFromCSV(savedCharms, skillNames)\r\n  }\r\n}\r\n","const onMouseEnter = (ele: Element) => {\r\n  if (!ele.classList.contains('navbar-selected')) {\r\n    ele.classList.add('navbar-hover')\r\n  }\r\n}\r\n\r\nconst onMouseLeave = (ele: Element) => {\r\n  ele.classList.remove('navbar-hover')\r\n}\r\n\r\nconst onClick = (parent: Element, ele: Element) => {\r\n  for (const li of Array.from(parent.children)) {\r\n    li.classList.remove('navbar-selected')\r\n    li.classList.remove('navbar-hover')\r\n  }\r\n  ele.classList.add('navbar-selected')\r\n\r\n  const selection = ele.getAttribute('data-selection')\r\n  const panels = document.getElementsByClassName('panel')\r\n\r\n  for (const panel of Array.from(panels)) {\r\n    const panelNumber = panel.getAttribute('data-panel-number')\r\n    if (selection === panelNumber) {\r\n      panel.classList.remove('hidden')\r\n    } else {\r\n      panel.classList.add('hidden')\r\n    }\r\n  }\r\n}\r\n\r\n/** initiate navbar state and attaches handlers */\r\nexport const initiateNavbar = () => {\r\n  const ul = document.getElementById('navbar-container')!\r\n    .children[0] as HTMLElement\r\n\r\n  for (const li of Array.from(ul.children)) {\r\n    li.addEventListener('mouseenter', () => onMouseEnter(li))\r\n    li.addEventListener('mouseleave', () => onMouseLeave(li))\r\n    li.addEventListener('click', () => onClick(ul, li))\r\n  }\r\n\r\n  onClick(ul, ul.children[0])\r\n}\r\n","import SkillActivationMap from '../../data-provider/models/skills/SkillActivationMap'\r\nimport SkillActivation from '../../data-provider/models/skills/SkillActivation'\r\nimport { htmlToElement } from '../../helper/html.helper'\r\n\r\nconst getActivationElements = () => {\r\n  return Array.from(document.getElementsByClassName('search-picker-activation'))\r\n}\r\n\r\n/** uncheck all selected skill activations */\r\nconst resetSkillActivations = () => {\r\n  const activations = getActivationElements()\r\n\r\n  activations.forEach((element) => {\r\n    const checkbox = element.children[0] as HTMLInputElement\r\n    const text = element.children[1] as HTMLElement\r\n\r\n    checkbox.checked = false\r\n    text.classList.remove('highlighted')\r\n  })\r\n}\r\n\r\n/** get list of currently selected skill activations */\r\nconst getSkillActivations = (): SkillActivation[] => {\r\n  const activations = getActivationElements()\r\n\r\n  return activations\r\n    // get only checked skills\r\n    .filter((element) => {\r\n      const checkbox = element.children[0] as HTMLInputElement\r\n      return checkbox.checked\r\n    })\r\n    // map to proper data model\r\n    .map((element) => {\r\n      const name = element.textContent!.trim()\r\n      const id = parseInt(element.getAttribute('data-id')!)\r\n      const requiredSkill = parseInt(element.getAttribute('data-skill')!)\r\n      const requiredPoints = parseInt(element.getAttribute('data-points')!)\r\n      const category = parseInt(element.parentElement!.getAttribute('data-category')!)\r\n\r\n      return {\r\n        id,\r\n        name,\r\n        requiredPoints,\r\n        requiredSkill,\r\n        isPositive: requiredPoints > 0,\r\n        category,\r\n      }\r\n    })\r\n}\r\n\r\nconst renderCategories = (skillCategories: string[]) => {\r\n  for (const index in skillCategories) {\r\n    const categoryName = skillCategories[index]\r\n    const node = htmlToElement(`\r\n      <div class=\"search-picker-category\" id=\"search-picker-category-${index}\" data-category=\"${index}\">\r\n        <div class=\"search-picker-category-title banner\">${categoryName}</div>\r\n      </div>\r\n    `)\r\n    document.getElementById('search-skill-picker')!.appendChild(node)\r\n  }\r\n}\r\n\r\nconst renderActivations = (skillActivation: SkillActivationMap) => {\r\n  skillActivation.forEach((activationList) => {\r\n    activationList\r\n      .filter(activation => activation.isPositive)\r\n      .reverse()\r\n      .forEach((activation) => {\r\n        const node = htmlToElement(`\r\n          <div class=\"search-picker-activation\" data-skill=\"${activation.requiredSkill}\" data-points=\"${activation.requiredPoints}\" data-id=\"${activation.id}\">\r\n            <input style=\"float:left;\" type=\"checkbox\">\r\n            <div class=\"search-picker-activation-name\">${activation.name}</div>\r\n          </div>\r\n        `)\r\n        document.getElementById(`search-picker-category-${activation.category}`)!.appendChild(node)\r\n      })\r\n  })\r\n}\r\n\r\nconst attachClickListener = () => {\r\n  const elements = Array.from(document.getElementsByClassName('search-picker-activation'))\r\n  for (const item of elements) {\r\n    item.addEventListener('click', (event) => {\r\n      // tick checkbox\r\n      const target = event.target as Element\r\n      const input: HTMLInputElement = item.children[0] as HTMLInputElement\r\n      if (target.tagName !== 'INPUT') {\r\n        input.checked = !input.checked\r\n      }\r\n\r\n      // add highlight class\r\n      const text = item.children[1]\r\n      input.checked ? text.classList.add('highlighted') : text.classList.remove('highlighted')\r\n    })\r\n  }\r\n}\r\n\r\n/** render all components of skillpicker and attach handlers */\r\nconst renderSkillPicker = (\r\n  skillActivation: SkillActivationMap,\r\n  skillCategories: string[],\r\n) => {\r\n  renderCategories(skillCategories)\r\n  renderActivations(skillActivation)\r\n  attachClickListener()\r\n}\r\n\r\nexport {\r\n  renderSkillPicker,\r\n  getSkillActivations,\r\n  resetSkillActivations,\r\n}\r\n","import { TORSO_UP_ID } from '../../data-provider/data-provider.module'\r\nimport EquipmentCategory from '../../data-provider/models/equipment/EquipmentCategory'\r\nimport EquipmentSkills from '../../data-provider/models/equipment/EquipmentSkills'\r\nimport ScoredSkilledEquipment from './ScoredSkilledEquipment'\r\n\r\nexport default class ArmorEvaluation {\r\n  equipment: ScoredSkilledEquipment[]\r\n  skills: EquipmentSkills = new EquipmentSkills()\r\n  score: number = 0\r\n  totalSlots: number = 0\r\n  torsoUp: number = 0\r\n\r\n  constructor (\r\n    equipment: ScoredSkilledEquipment[],\r\n    skills?: EquipmentSkills,\r\n    score?: number,\r\n    totalSlots?: number,\r\n    torsoUp?: number,\r\n  ) {\r\n    this.equipment = equipment\r\n    if (skills) this.skills = skills\r\n    if (score) this.score = score\r\n    if (totalSlots) this.totalSlots = totalSlots\r\n    if (torsoUp) this.torsoUp = torsoUp\r\n  }\r\n\r\n  getSlots () {\r\n    return this.equipment\r\n      .map(x => x.slots)\r\n      .filter(x => x > 0)\r\n  }\r\n\r\n  getSlotsExceptChest () {\r\n    return this.equipment\r\n      .filter(x => x.category !== EquipmentCategory.CHEST)\r\n      .map(x => x.slots)\r\n      .filter(x => x > 0)\r\n  }\r\n\r\n  copy () {\r\n    return new ArmorEvaluation(\r\n      this.equipment.map(x => x),\r\n      new EquipmentSkills(this.skills),\r\n      this.score,\r\n      this.totalSlots,\r\n      this.torsoUp,\r\n    )\r\n  }\r\n\r\n  addPiece (piece: ScoredSkilledEquipment) {\r\n    if (piece.skills.has(TORSO_UP_ID)) this.torsoUp++\r\n    else {\r\n      if (piece.category === EquipmentCategory.CHEST && this.torsoUp > 0) {\r\n        for (const [k, v] of piece.skills) {\r\n          this.skills.add(k, v * (this.torsoUp + 1))\r\n        }\r\n      } else {\r\n        this.skills.addSkills(piece.skills)\r\n      }\r\n    }\r\n    this.equipment[piece.category] = piece\r\n    this.score = this.score + piece.score\r\n    this.totalSlots = this.totalSlots + piece.slots\r\n  }\r\n}\r\n","import Defense from '../../data-provider/models/equipment/Defense'\r\nimport EquipmentSkills from '../../data-provider/models/equipment/EquipmentSkills'\r\nimport Resistance from '../../data-provider/models/equipment/Resistance'\r\nimport Evaluation from './Evaluation'\r\nimport ArmorPiece from '../../data-provider/models/equipment/ArmorPiece'\r\nimport Decoration from '../../data-provider/models/equipment/Decoration'\r\nimport Charm from '../../data-provider/models/equipment/Charm'\r\nimport SkillActivationMap from '../../data-provider/models/skills/SkillActivationMap'\r\nimport SkillActivation from '../../data-provider/models/skills/SkillActivation'\r\nimport ArmorEvaluation from '../../scorer/models/ArmorEvaluation'\r\nimport DecoEvaluation from '../../scorer/models/DecoEvaluation'\r\nimport EquipmentCategory from '../../data-provider/models/equipment/EquipmentCategory'\r\n\r\nexport default class ArmorSet {\r\n  readonly head: ArmorPiece\r\n  readonly chest: ArmorPiece\r\n  readonly arms: ArmorPiece\r\n  readonly waist: ArmorPiece\r\n  readonly legs: ArmorPiece\r\n  readonly charm: Charm\r\n  readonly decos: Decoration[]\r\n\r\n  evaluation: Evaluation\r\n\r\n  constructor (\r\n    armorEval: ArmorEvaluation,\r\n    decoEval: DecoEvaluation,\r\n    skillActivations: SkillActivationMap,\r\n  ) {\r\n    const chest = armorEval.equipment[EquipmentCategory.CHEST] as unknown as ArmorPiece\r\n\r\n    this.chest = armorEval.torsoUp > 0 ? ArmorSet.applyTorsoUpToChest(chest, armorEval.torsoUp) : chest\r\n    this.head = armorEval.equipment[EquipmentCategory.HEAD] as unknown as ArmorPiece\r\n    this.arms = armorEval.equipment[EquipmentCategory.ARMS] as unknown as ArmorPiece\r\n    this.waist = armorEval.equipment[EquipmentCategory.WAIST] as unknown as ArmorPiece\r\n    this.legs = armorEval.equipment[EquipmentCategory.LEGS] as unknown as ArmorPiece\r\n    this.charm = armorEval.equipment[EquipmentCategory.CHARM] as unknown as Charm\r\n    this.decos = decoEval.decos\r\n    this.evaluation = this.evaluate(armorEval, decoEval, skillActivations)\r\n  }\r\n\r\n  private static applyTorsoUpToChest (chest: ArmorPiece, torsoUp: number): ArmorPiece {\r\n    const newSkills = new EquipmentSkills(chest.skills)\r\n    newSkills.multiply(torsoUp + 1)\r\n    return {\r\n      ...chest,\r\n      skills: newSkills,\r\n    }\r\n  }\r\n\r\n  getPieces (): ArmorPiece[] {\r\n    return [\r\n      this.head,\r\n      this.chest,\r\n      this.arms,\r\n      this.waist,\r\n      this.legs,\r\n    ]\r\n  }\r\n\r\n  evaluate (\r\n    armorEval: ArmorEvaluation,\r\n    decoEval: DecoEvaluation,\r\n    activations: SkillActivationMap,\r\n  ): Evaluation {\r\n    const totalDefense: Defense = { base: 0, max: 0 }\r\n    let totalResistance: Resistance = [0, 0, 0, 0, 0]\r\n\r\n    // iterate over all armor pieces\r\n    for (const piece of this.getPieces()) {\r\n      totalDefense.base += piece.defense.base\r\n      totalDefense.max += piece.defense.max\r\n      totalResistance = piece.resistance.map((res, i) => res + totalResistance[i])\r\n    }\r\n\r\n    // get total skills\r\n    const decoSkills = new EquipmentSkills()\r\n    decoEval.decos.forEach(d => decoSkills.addSkills(d.skills))\r\n    const skills = new EquipmentSkills(armorEval.skills)\r\n    skills.addSkills(new EquipmentSkills(decoSkills))\r\n\r\n    // get activations\r\n    const a: SkillActivation[] = []\r\n    for (const [sId, sVal] of skills) {\r\n      if (Math.abs(sVal) < 10) {\r\n        continue\r\n      }\r\n\r\n      const activationsOfSkill = activations.get(sId)!\r\n        .filter(act => {\r\n          return act.isPositive\r\n            ? sVal >= act.requiredPoints\r\n            : sVal <= act.requiredPoints\r\n        })\r\n      a.push(...activationsOfSkill)\r\n    }\r\n\r\n    // build, save and return model\r\n    const thisEval: Evaluation = {\r\n      defense: totalDefense,\r\n      resistance: totalResistance,\r\n      activations: a,\r\n      skills,\r\n      torsoUp: armorEval.torsoUp,\r\n    }\r\n    this.evaluation = thisEval\r\n    return thisEval\r\n  }\r\n}\r\n","/* eslint-disable no-unused-vars */\r\nenum ArmorType {\r\n  ALL = 0,\r\n  BLADEMASTER = 1,\r\n  GUNNER = 2,\r\n}\r\n\r\nexport default ArmorType\r\n","import { DUMMY_PIECE, MAX_RARITY, TORSO_UP_ID } from '../data-provider/data-provider.module'\r\nimport ArmorPiece from '../data-provider/models/equipment/ArmorPiece'\r\nimport ArmorType from '../data-provider/models/equipment/ArmorType'\r\nimport Charm from '../data-provider/models/equipment/Charm'\r\nimport EquipmentCategory from '../data-provider/models/equipment/EquipmentCategory'\r\nimport EquipmentSkills from '../data-provider/models/equipment/EquipmentSkills'\r\nimport Rarity from '../data-provider/models/equipment/Rarity'\r\nimport SkilledItem from '../data-provider/models/equipment/SkilledItem'\r\nimport Slots from '../data-provider/models/equipment/Slots'\r\nimport SkillActivation from '../data-provider/models/skills/SkillActivation'\r\n\r\nconst filterType = (piece: ArmorPiece, type: ArmorType) => {\r\n  return piece.type === ArmorType.ALL || piece.type === type\r\n}\r\n\r\nconst filterRarity = (item: SkilledItem, rarity: Rarity) => {\r\n  return item.rarity <= rarity\r\n}\r\n\r\nconst filterHasSkill = (item: SkilledItem, desiredSkills: SkillActivation[]) => {\r\n  return desiredSkills.some((act) => {\r\n    const s = item.skills.get(act.requiredSkill)\r\n    return s && s > 0\r\n  })\r\n}\r\n\r\nconst applyRarityFilter = (items: SkilledItem[], rarity: Rarity) => {\r\n  if (rarity === MAX_RARITY) return items\r\n  return items.filter(x => filterRarity(x, rarity))\r\n}\r\n\r\nconst applyCharmFilter = (charms: Charm[], skills: SkillActivation[]) => {\r\n  // find highest generic slot charms\r\n  const highestGenericSlotCharm: Charm[] = []\r\n  for (const slots of [3, 2, 1]) {\r\n    const x = charms.find(c => c.slots === slots)\r\n    if (x) {\r\n      const newC: Charm = {\r\n        name: `${slots} Slot Charm`,\r\n        slots: slots as Slots,\r\n        category: EquipmentCategory.CHARM,\r\n        rarity: 0,\r\n        skills: new EquipmentSkills(),\r\n      }\r\n      highestGenericSlotCharm.push(newC)\r\n      break\r\n    }\r\n  }\r\n\r\n  // build list of charms with wanted skills or with slots\r\n  const result = charms\r\n    .filter(x => filterHasSkill(x, skills))\r\n    .concat(...highestGenericSlotCharm)\r\n\r\n  // return list with dummy charm if there are no pieces\r\n  if (result.length === 0) {\r\n    return [{\r\n      ...DUMMY_PIECE,\r\n      category: EquipmentCategory.CHARM,\r\n    }]\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nconst applyArmorFilter = (pieces: ArmorPiece[], rarity: Rarity, type: ArmorType, category: EquipmentCategory, skills: SkillActivation[]) => {\r\n  const rarityFiltered = applyRarityFilter(pieces, rarity) as ArmorPiece[]\r\n  const typeFiltered = rarityFiltered.filter(p => filterType(p, type))\r\n  const sorted = typeFiltered.sort((a, b) => b.defense.max - a.defense.max)\r\n\r\n  // find generic slot pieces with highest defense\r\n  const highestGenericSlotPiece: ArmorPiece[] = []\r\n  for (const slots of [3, 2, 1]) {\r\n    const x = sorted.find(p => p.slots === slots)\r\n    if (x) {\r\n      const p: ArmorPiece = {\r\n        type: x.type,\r\n        defense: x.defense,\r\n        resistance: x.resistance,\r\n        name: `${slots} Slot Piece`,\r\n        slots: slots as Slots,\r\n        category: x.category,\r\n        rarity: x.rarity,\r\n        skills: new EquipmentSkills(),\r\n      }\r\n      highestGenericSlotPiece.push(p)\r\n      break\r\n    }\r\n  }\r\n\r\n  // find piece with torso up with highest defense\r\n  const torsoUpPieces: ArmorPiece[] = [sorted.find(p => p.skills.has(TORSO_UP_ID))]\r\n    .filter(x => x !== undefined)\r\n    .map(x => {\r\n      const renamed: ArmorPiece = {\r\n        ...x!,\r\n        name: 'Torso Up Piece',\r\n      }\r\n      return renamed\r\n    }) as ArmorPiece[]\r\n\r\n  // build list of pieces with wanted skills, with slots, or with torso up\r\n  const result = sorted\r\n    .filter(x => filterHasSkill(x, skills))\r\n    .concat(...highestGenericSlotPiece)\r\n    .concat(...torsoUpPieces)\r\n\r\n  // return list with dummy element if there are no pieces\r\n  if (result.length === 0) {\r\n    return [{\r\n      ...DUMMY_PIECE,\r\n      type,\r\n      category,\r\n    }]\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport {\r\n  filterType,\r\n  filterRarity,\r\n  filterHasSkill,\r\n  applyRarityFilter,\r\n  applyCharmFilter,\r\n  applyArmorFilter,\r\n}\r\n","import { TORSO_UP_ID } from '../data-provider/data-provider.module'\r\nimport Decoration from '../data-provider/models/equipment/Decoration'\r\nimport EquipmentSkills from '../data-provider/models/equipment/EquipmentSkills'\r\nimport Slots from '../data-provider/models/equipment/Slots'\r\nimport DecoPermutation from './models/DecoPermutation'\r\nimport ScoredSkilledEquipment from './models/ScoredSkilledEquipment'\r\n\r\n/** get score of a skill map relative to wanted skills */\r\nconst getScoreFromSkillMap = (m: EquipmentSkills, w: EquipmentSkills): number => {\r\n  let score = 0\r\n  for (const [sId] of w) {\r\n    score += m.get(sId) || 0\r\n  }\r\n\r\n  return score\r\n}\r\n\r\nconst scoreTorsoUpPieces = (piece: ScoredSkilledEquipment, maxTorsoScore: number) => {\r\n  if (piece.skills.has(TORSO_UP_ID)) {\r\n    const newPiece: ScoredSkilledEquipment = {\r\n      ...piece,\r\n      score: maxTorsoScore,\r\n    }\r\n\r\n    return newPiece\r\n  }\r\n\r\n  return piece\r\n}\r\n\r\n/** apply score to a list of decos */\r\nconst evaluateListOfDecos = (decos: Decoration[], wantedSkills: EquipmentSkills): DecoPermutation => {\r\n  const skillMap: EquipmentSkills = new EquipmentSkills()\r\n  decos.forEach(deco => skillMap.addSkills(deco.skills))\r\n\r\n  // get max of default and computed score\r\n  // default score can only be higher than computed when the decos of 2 wanted skills cancel each other out (e.g. handicraft and sharpness)\r\n  const computedScore = getScoreFromSkillMap(skillMap, wantedSkills)\r\n  const defaultScore = Math.max(...Array.from(skillMap.values()))\r\n  const score = (Math.max(computedScore, defaultScore))\r\n\r\n  return {\r\n    skills: skillMap,\r\n    decos,\r\n    score,\r\n  }\r\n}\r\n\r\n/**\r\n * checks if deco permutation is the same or better than comparison in respect to wanted skills\r\n * returns 0 if better/different, returns 1 if same, returns 2 if worse\r\n */\r\nconst decoPermWorseOrSameAsComparison = (perm: DecoPermutation, comparison: DecoPermutation, wantedSkills: EquipmentSkills) => {\r\n  const arr = []\r\n  for (const w of Array.from(wantedSkills.entries())) {\r\n    const wId = w[0]\r\n    const a = perm.skills.get(wId)\r\n    const b = comparison.skills.get(wId)\r\n\r\n    if (a > b) return 0\r\n    if (a === b) arr.push(1)\r\n    else arr.push(2)\r\n  }\r\n  return Math.max(...arr)\r\n}\r\n\r\n/** returns a mapping of slot level to the amount of score it is worth */\r\nconst getDecoSlotScoreMap = (decoPermutationsPerSlotLevel: Map<Slots, DecoPermutation[]>): Map<number, number> => {\r\n  const m = new Map(Array.from(decoPermutationsPerSlotLevel.entries()).map(([slotLevel, permList]) => {\r\n    return [slotLevel, Math.max(...permList.map(x => x.score))]\r\n  }))\r\n  m.set(0, 0)\r\n\r\n  return m\r\n}\r\n\r\n/** prune a list of deco permutations of all duplicates and downgrades */\r\nconst pruneDecoPermutations = (permList: DecoPermutation[], wantedSkills: EquipmentSkills): DecoPermutation[] => {\r\n  // we go through entire list left through right => x\r\n  // for each ele, we check the entire list again => y\r\n  // if y is an upgrade of x, then x will be filtered out\r\n  // if y is the same as x, and y is further right in the list, then x will be filtered\r\n  // only if x has no upgrade, and no element right of it that is the same will it remain in the list\r\n  const res = permList\r\n    .filter((x, i) => {\r\n      let shouldBeFiltered: boolean = false\r\n\r\n      for (let j = 0; j < permList.length; j++) {\r\n        if (i === j) continue\r\n\r\n        const y = permList[j]\r\n        const v = decoPermWorseOrSameAsComparison(x, y, wantedSkills)\r\n\r\n        if (v === 2) {\r\n          shouldBeFiltered = true\r\n          break\r\n        }\r\n\r\n        if (j > i && v === 1) {\r\n          shouldBeFiltered = true\r\n          break\r\n        }\r\n      }\r\n\r\n      return !shouldBeFiltered\r\n    })\r\n\r\n  return res\r\n}\r\n\r\nexport {\r\n  getScoreFromSkillMap,\r\n  scoreTorsoUpPieces,\r\n  evaluateListOfDecos,\r\n  decoPermWorseOrSameAsComparison,\r\n  getDecoSlotScoreMap,\r\n  pruneDecoPermutations,\r\n}\r\n","import Decoration from '../../data-provider/models/equipment/Decoration'\r\nimport EquipmentSkills from '../../data-provider/models/equipment/EquipmentSkills'\r\nimport Slots from '../../data-provider/models/equipment/Slots'\r\nimport DecoMinSlotMap from './DecoMinSlotMap'\r\nimport DecoPermutation from './DecoPermutation'\r\n\r\nexport default class DecoEvaluation {\r\n  decoMinSlotMap: DecoMinSlotMap\r\n  unusedSlotsSum: number\r\n  missingSkills: EquipmentSkills\r\n  decos: Decoration[] = []\r\n  requiredSlots: number = 0\r\n\r\n  constructor (\r\n    decoMinSlotMap: DecoMinSlotMap,\r\n    unusedSlotsSum: number,\r\n    missingSkills: EquipmentSkills,\r\n    decos?: Decoration[],\r\n    requiredSlots?: number,\r\n  ) {\r\n    this.decoMinSlotMap = decoMinSlotMap\r\n    this.unusedSlotsSum = unusedSlotsSum\r\n    this.missingSkills = missingSkills\r\n    if (decos) this.decos = decos\r\n    this.requiredSlots = requiredSlots || this.calculateRequiredSlots()\r\n  }\r\n\r\n  copy () {\r\n    return new DecoEvaluation(\r\n      this.decoMinSlotMap,\r\n      this.unusedSlotsSum,\r\n      new EquipmentSkills(this.missingSkills),\r\n      this.decos.map(x => x),\r\n      this.requiredSlots,\r\n    )\r\n  }\r\n\r\n  calculateRequiredSlots (): number {\r\n    let newRequiredSlots: number = 0\r\n    for (const w of this.missingSkills) {\r\n      const sId = w[0]\r\n      const sVal = w[1]\r\n      newRequiredSlots += this.decoMinSlotMap.getMinRequiredSlotsForSkill(sId, sVal)\r\n    }\r\n    this.requiredSlots = newRequiredSlots\r\n    return newRequiredSlots\r\n  }\r\n\r\n  addPerm (perm: DecoPermutation, slotLevel: Slots) {\r\n    this.unusedSlotsSum -= slotLevel\r\n    this.decos.push(...perm.decos)\r\n\r\n    // use custom loop instead of EquipmentSkills.substractSkills and DecoEvaluation.calculateRequiredSlots\r\n    // to save on processing because this method is called a lot\r\n    let newRequiredSlots: number = 0\r\n    for (const w of this.missingSkills) {\r\n      const sId = w[0]\r\n      const sVal = w[1]\r\n\r\n      const newVal = sVal - perm.skills.get(sId)\r\n      this.missingSkills.set(sId, newVal)\r\n      newRequiredSlots += this.decoMinSlotMap.getMinRequiredSlotsForSkill(sId, newVal)\r\n    }\r\n\r\n    this.requiredSlots = newRequiredSlots\r\n  }\r\n}\r\n","import Decoration from '../../data-provider/models/equipment/Decoration'\r\nimport EquipmentSkills from '../../data-provider/models/equipment/EquipmentSkills'\r\nimport GameID from '../../data-provider/models/GameId'\r\n\r\nfunction * decoVariationMinSlotsGenerator (\r\n  decosOfSkill: Decoration[],\r\n  skillId: GameID,\r\n  requiredPoints: number,\r\n  requiredSlots: number,\r\n  existingPoints: number,\r\n): Generator<number, void, undefined> {\r\n  for (const deco of decosOfSkill) {\r\n    const newExistingPoints = existingPoints + deco.skills.get(skillId)!\r\n    const newRequiredSlots = requiredSlots + deco.requiredSlots\r\n\r\n    if (newExistingPoints >= requiredPoints) {\r\n      yield newRequiredSlots\r\n    } else {\r\n      yield * decoVariationMinSlotsGenerator(\r\n        decosOfSkill,\r\n        skillId,\r\n        requiredPoints,\r\n        newRequiredSlots,\r\n        newExistingPoints,\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\n/** calculates and saves how many slots are required to get x points of a certain skill */\r\nexport default class DecoMinSlotMap {\r\n  private static readonly DUMMY_SCORE = 1000\r\n\r\n  private decorationsOfSkillMap: Map<GameID, Decoration[]> = new Map()\r\n  private calculations: Map<GameID, Map<number, number>> = new Map()\r\n\r\n  constructor (allDecos: Decoration[], wantedSkills: EquipmentSkills) {\r\n    for (const w of wantedSkills) {\r\n      const sId = w[0]\r\n\r\n      // set decorations of skill\r\n      const decosOfSkill = allDecos\r\n        .filter(x => x.skills.get(sId) > 0)\r\n        .sort((a, b) => b.skills.get(sId) - a.skills.get(sId))\r\n      this.decorationsOfSkillMap.set(sId, decosOfSkill)\r\n\r\n      // init calculation map of that skill\r\n      this.calculations.set(sId, new Map())\r\n    }\r\n  }\r\n\r\n  private calculateMinRequiredSlots (skillId: GameID, skillPoints: number): number {\r\n    const decosOfSkill = this.decorationsOfSkillMap.get(skillId)!\r\n    if (decosOfSkill.length === 0) return DecoMinSlotMap.DUMMY_SCORE\r\n\r\n    let minRequiredSlots = DecoMinSlotMap.DUMMY_SCORE\r\n    for (const reqSlots of decoVariationMinSlotsGenerator(decosOfSkill, skillId, skillPoints, 0, 0)) {\r\n      if (reqSlots < minRequiredSlots) minRequiredSlots = reqSlots\r\n    }\r\n\r\n    return minRequiredSlots\r\n  }\r\n\r\n  getMinRequiredSlotsForSkill (skillId: GameID, skillPoints: number): number {\r\n    const m = this.calculations.get(skillId)!\r\n\r\n    if (skillPoints <= 0) return 0\r\n    if (m.has(skillPoints)) return m.get(skillPoints)!\r\n\r\n    const newCalc = this.calculateMinRequiredSlots(skillId, skillPoints)\r\n    m.set(skillPoints, newCalc)\r\n    return newCalc\r\n  }\r\n}\r\n","import { DUMMY_PIECE } from '../data-provider/data-provider.module'\r\nimport ArmorPiece from '../data-provider/models/equipment/ArmorPiece'\r\nimport ArmorType from '../data-provider/models/equipment/ArmorType'\r\nimport Charm from '../data-provider/models/equipment/Charm'\r\nimport Decoration from '../data-provider/models/equipment/Decoration'\r\nimport EquipmentCategory from '../data-provider/models/equipment/EquipmentCategory'\r\nimport EquipmentSkills from '../data-provider/models/equipment/EquipmentSkills'\r\nimport SkilledEquipment from '../data-provider/models/equipment/SkilledEquipment'\r\nimport Slots from '../data-provider/models/equipment/Slots'\r\nimport StaticSkillData from '../data-provider/models/skills/StaticSkillData'\r\nimport ArmorEvaluation from '../scorer/models/ArmorEvaluation'\r\nimport ArmorSet from './models/ArmorSet'\r\nimport DecoPermutation from '../scorer/models/DecoPermutation'\r\nimport SearchConstraints from './models/SearchConstraints'\r\nimport ScoredSkilledEquipment from '../scorer/models/ScoredSkilledEquipment'\r\nimport { applyArmorFilter, applyCharmFilter, applyRarityFilter, filterHasSkill } from '../data-filter/data-filter.module'\r\nimport { pruneDecoPermutations, evaluateListOfDecos, getDecoSlotScoreMap, getScoreFromSkillMap, scoreTorsoUpPieces } from '../scorer/scorer.module'\r\nimport DecoEvaluation from '../scorer/models/DecoEvaluation'\r\nimport DecoMinSlotMap from '../scorer/models/DecoMinSlotMap'\r\n\r\n// #region initial search data\r\n/** get initial armor eval with all dummy pieces */\r\nconst getIntiailArmorEval = (type: ArmorType) => {\r\n  const categoryArray = [\r\n    EquipmentCategory.HEAD,\r\n    EquipmentCategory.CHEST,\r\n    EquipmentCategory.ARMS,\r\n    EquipmentCategory.WAIST,\r\n    EquipmentCategory.LEGS,\r\n    EquipmentCategory.CHARM,\r\n  ]\r\n\r\n  const pieces: ScoredSkilledEquipment[] = categoryArray.map((x) => {\r\n    return {\r\n      ...DUMMY_PIECE,\r\n      type,\r\n      category: x,\r\n      score: 0,\r\n    }\r\n  })\r\n\r\n  return new ArmorEvaluation(pieces)\r\n}\r\n\r\n/** returns all the ways you can possibly arrange the viable decorations on a given slot level (1, 2, 3) */\r\nconst getDecorationVariationsPerSlotLevel = (\r\n  decorations: Decoration[],\r\n  wantedSkills: EquipmentSkills,\r\n): Map<Slots, DecoPermutation[]> => {\r\n  // get all decorations of specific slot\r\n  const rawOneSlots = decorations.filter(d => d.requiredSlots === 1)\r\n  const rawTwoSlots = decorations.filter(d => d.requiredSlots === 2)\r\n  const rawThreeSlots = decorations.filter(d => d.requiredSlots === 3)\r\n\r\n  // create dummy for unused slots\r\n  const dummy: Decoration = {\r\n    name: 'None',\r\n    rarity: 0,\r\n    requiredSlots: 0,\r\n    skills: new EquipmentSkills(),\r\n  }\r\n\r\n  // get all variations for 1 slot\r\n  const oneSlotVariations = rawOneSlots.map(x => [x]).concat([[dummy]])\r\n  const oneSlotEvaluated = pruneDecoPermutations(oneSlotVariations.map(x => evaluateListOfDecos(x, wantedSkills)), wantedSkills)\r\n  const prunedOneSlotVariations = oneSlotEvaluated.map(x => x.decos)\r\n\r\n  // get all variations for 2 slots\r\n  const twoOneSlotDecoVariations = []\r\n  for (let i = 0; i < prunedOneSlotVariations.length; i++) {\r\n    const x = prunedOneSlotVariations[i]\r\n    for (let j = Math.abs(i); j < prunedOneSlotVariations.length; j++) {\r\n      const y = prunedOneSlotVariations[j]\r\n      twoOneSlotDecoVariations.push(x.concat(y))\r\n    }\r\n  }\r\n  const twoSlotVariations = rawTwoSlots\r\n    .map(x => [x])\r\n    .concat(twoOneSlotDecoVariations)\r\n  const twoSlotEvaluated = pruneDecoPermutations(twoSlotVariations.map(x => evaluateListOfDecos(x, wantedSkills)), wantedSkills)\r\n\r\n  // get all variations for 3 slots\r\n  const threeOneSlotDecoVariations = []\r\n  for (let i = 0; i < prunedOneSlotVariations.length; i++) {\r\n    const x = prunedOneSlotVariations[i]\r\n    for (let j = Math.abs(i); j < twoOneSlotDecoVariations.length; j++) {\r\n      const y = twoOneSlotDecoVariations[j]\r\n      threeOneSlotDecoVariations.push(x.concat(y))\r\n    }\r\n  }\r\n  const oneAndTwoSlotDecoVariations = []\r\n  for (const oneSlot of rawOneSlots) {\r\n    for (const twoSlot of rawTwoSlots) {\r\n      oneAndTwoSlotDecoVariations.push([oneSlot, twoSlot])\r\n    }\r\n  }\r\n  const threeSlotVariations = rawThreeSlots\r\n    .map(x => [x])\r\n    .concat(oneAndTwoSlotDecoVariations)\r\n    .concat(threeOneSlotDecoVariations)\r\n  const threeSlotEvaluated = pruneDecoPermutations(threeSlotVariations.map(x => evaluateListOfDecos(x, wantedSkills)), wantedSkills)\r\n\r\n  // return pruned evaluations\r\n  return new Map([\r\n    [0, []],\r\n    [1, oneSlotEvaluated],\r\n    [2, twoSlotEvaluated],\r\n    [3, threeSlotEvaluated],\r\n  ])\r\n}\r\n// #endregion\r\n\r\n// #region search logic\r\nfunction * getArmorPermutations (\r\n  equipment: ScoredSkilledEquipment[][],\r\n  previousEval: ArmorEvaluation,\r\n  maximumRemainingScore: number[],\r\n  requiredScore: number,\r\n  categoryIndex: number,\r\n): Generator<ArmorEvaluation, void, undefined> {\r\n  for (const piece of equipment[categoryIndex]) {\r\n    // create and eval new set\r\n    const thisEval = previousEval.copy()\r\n    thisEval.addPiece(piece)\r\n\r\n    // yield it if score is sufficient\r\n    if (thisEval.score >= requiredScore) yield thisEval\r\n    // otherwise check if its possible to still find sets on this branch and break if not\r\n    else {\r\n      if ((thisEval.score + maximumRemainingScore[categoryIndex]) < requiredScore) break\r\n    }\r\n\r\n    // then yield the next loop if there is one\r\n    if (categoryIndex > 0) {\r\n      yield * getArmorPermutations(\r\n        equipment,\r\n        thisEval,\r\n        maximumRemainingScore,\r\n        requiredScore,\r\n        categoryIndex - 1,\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nfunction * getDecoPermutations (\r\n  decoPermutationsPerSlotLevel: Map<Slots, DecoPermutation[]>,\r\n  slotsOfArmor: Slots[],\r\n  previousEval: DecoEvaluation,\r\n  slotIndex: number,\r\n): Generator<DecoEvaluation, void, undefined> {\r\n  const slotLevel = slotsOfArmor[slotIndex]\r\n  for (const perm of decoPermutationsPerSlotLevel.get(slotLevel)!) {\r\n    // create and eval new set\r\n    const thisEval = previousEval.copy()\r\n    thisEval.addPerm(perm, slotLevel)\r\n\r\n    // yield it if score is sufficient\r\n    if (thisEval.requiredSlots <= 0) yield thisEval\r\n    // otherwise check if its possible to still find sets on this branch and break if not\r\n    else {\r\n      if (thisEval.unusedSlotsSum < thisEval.requiredSlots) continue\r\n    }\r\n\r\n    // then yield the next loop if there is one\r\n    if (slotIndex > 0) {\r\n      yield * getDecoPermutations(\r\n        decoPermutationsPerSlotLevel,\r\n        slotsOfArmor,\r\n        thisEval,\r\n        slotIndex - 1,\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nconst transformTorsoUpDecoPermutation = (perm: DecoPermutation, torsoUp: number): DecoPermutation => {\r\n  const factor = torsoUp + 1\r\n\r\n  const score = perm.score * factor\r\n  const decos = perm.decos.map(d => {\r\n    const newSkills = new EquipmentSkills(d.skills)\r\n    newSkills.multiply(factor)\r\n    const newDeco: Decoration = {\r\n      ...d,\r\n      affectedByTorsoUp: true,\r\n      name: d.name.concat(' (TorsoUp)'),\r\n      skills: newSkills,\r\n    }\r\n\r\n    return newDeco\r\n  })\r\n  const newTotalSkills = new EquipmentSkills(perm.skills)\r\n  newTotalSkills.multiply(factor)\r\n  const skills = newTotalSkills\r\n\r\n  return {\r\n    score,\r\n    decos,\r\n    skills,\r\n  }\r\n}\r\n\r\nconst findSufficientDecoPermutation = (\r\n  armorEval: ArmorEvaluation,\r\n  constraints: SearchConstraints,\r\n  wantedSkills: EquipmentSkills,\r\n  decoMinSlotMap: DecoMinSlotMap,\r\n  decoPermutationsPerSlotLevel: Map<Slots, DecoPermutation[]>,\r\n): DecoEvaluation | undefined => {\r\n  const _inner = (\r\n    _slotList: Slots[],\r\n    _initialEval: DecoEvaluation,\r\n  ): DecoEvaluation | undefined => {\r\n    if (_initialEval.requiredSlots <= 0) return _initialEval\r\n    if (_initialEval.unusedSlotsSum < _initialEval.requiredSlots) return undefined\r\n    if (_slotList.length === 0) return undefined\r\n\r\n    const decoEvaluation = getDecoPermutations(\r\n      decoPermutationsPerSlotLevel,\r\n      _slotList,\r\n      _initialEval,\r\n      _slotList.length - 1,\r\n    ).next().value\r\n\r\n    if (decoEvaluation) return decoEvaluation\r\n    return undefined\r\n  }\r\n\r\n  let r: DecoEvaluation | undefined\r\n  const torsoSlots = armorEval.equipment[EquipmentCategory.CHEST].slots\r\n  const missingSkills = new EquipmentSkills(Array.from(wantedSkills).map(([sId, sVal]) => {\r\n    return [sId, sVal - armorEval.skills.get(sId)]\r\n  }))\r\n  const slotSum = armorEval.totalSlots + constraints.weaponSlots\r\n\r\n  if (armorEval.torsoUp > 0 && torsoSlots > 0) {\r\n    // if torso up, fill the chest slots and then iterate over permutations from there\r\n    const slotList = armorEval.getSlotsExceptChest().concat(constraints.weaponSlots ? constraints.weaponSlots : [])\r\n    const slotSumWithoutTorso = slotSum - torsoSlots\r\n    const initialEval = new DecoEvaluation(decoMinSlotMap, slotSumWithoutTorso, missingSkills)\r\n    for (const chestPerm of decoPermutationsPerSlotLevel.get(torsoSlots)!) {\r\n      const transformedPerm = transformTorsoUpDecoPermutation(chestPerm, armorEval.torsoUp)\r\n      const copiedEval = initialEval.copy()\r\n      copiedEval.addPerm(transformedPerm, torsoSlots)\r\n      const temp = _inner(slotList, copiedEval)\r\n      if (temp) {\r\n        r = temp\r\n        break\r\n      }\r\n    }\r\n  } else {\r\n    // otherwise just iterate over permutations\r\n    const slotList = armorEval.getSlots().concat(constraints.weaponSlots ? constraints.weaponSlots : [])\r\n    r = _inner(slotList, new DecoEvaluation(decoMinSlotMap, armorEval.totalSlots + constraints.weaponSlots, missingSkills))\r\n  }\r\n\r\n  return r\r\n}\r\n\r\nconst findSets = (\r\n  armorPieces: ArmorPiece[][],\r\n  decorations: Decoration[],\r\n  charms: Charm[],\r\n  constraints: SearchConstraints,\r\n  skillData: StaticSkillData,\r\n) => {\r\n  const wantedSkills: EquipmentSkills = new EquipmentSkills(constraints.skillActivations.map(x => [x.requiredSkill, x.requiredPoints]))\r\n  const decoPermutationsPerSlotLevel = getDecorationVariationsPerSlotLevel(decorations, wantedSkills)\r\n  const slotScoreMap = getDecoSlotScoreMap(decoPermutationsPerSlotLevel)\r\n  const initialArmorEval = getIntiailArmorEval(constraints.armorType)\r\n  const wantedScore = getScoreFromSkillMap(wantedSkills, wantedSkills) - slotScoreMap.get(constraints.weaponSlots)!\r\n  const decoMinSlotMap = new DecoMinSlotMap(decorations, wantedSkills)\r\n\r\n  const skilledEquipment: SkilledEquipment[][] = armorPieces\r\n  skilledEquipment.push(charms)\r\n\r\n  // score equipment\r\n  const scoredEquipment: ScoredSkilledEquipment[][] = skilledEquipment\r\n    .map(equList => equList.map((equ) => {\r\n      const score = slotScoreMap.get(equ.slots)! + getScoreFromSkillMap(equ.skills, wantedSkills)\r\n      return {\r\n        ...equ,\r\n        score,\r\n      }\r\n    }))\r\n\r\n  // reorder equipment and manually rescore torso up pieces\r\n  const maxTorsoScore = Math.max(...scoredEquipment[1].map(x => x.score))\r\n  const readjustedEquipment = [\r\n    scoredEquipment[1], // chest first to simplify torso up calculation\r\n    scoredEquipment[0].map(x => scoreTorsoUpPieces(x, maxTorsoScore)),\r\n    scoredEquipment[2], // arms cant have torso up\r\n    scoredEquipment[3].map(x => scoreTorsoUpPieces(x, maxTorsoScore)),\r\n    scoredEquipment[4].map(x => scoreTorsoUpPieces(x, maxTorsoScore)),\r\n    scoredEquipment[5], // charm cant have torso up\r\n  ]\r\n\r\n  // sort equipment by score\r\n  const sorted = readjustedEquipment.map(l => l.sort((a, b) => b.score - a.score))\r\n\r\n  // get list of maximum score of remaining iterations\r\n  const maximumRemainingScore = [0]\r\n  let sumOfAllIterations = 0\r\n  sorted.map(x => x[0].score).forEach((m) => {\r\n    sumOfAllIterations += m\r\n    maximumRemainingScore.push(sumOfAllIterations)\r\n  })\r\n\r\n  let length = 0\r\n  const validSets: ArmorSet[] = []\r\n  // try all viable armor permuations\r\n  for (const armorEvaluation of getArmorPermutations(\r\n    sorted,\r\n    initialArmorEval,\r\n    maximumRemainingScore,\r\n    wantedScore,\r\n    sorted.length - 1,\r\n  )) {\r\n    // find first sufficient deco eval\r\n    const decoEvaluation = findSufficientDecoPermutation(\r\n      armorEvaluation,\r\n      constraints,\r\n      wantedSkills,\r\n      decoMinSlotMap,\r\n      decoPermutationsPerSlotLevel,\r\n    )\r\n\r\n    // build and append set if there is any deco eval\r\n    if (decoEvaluation) {\r\n      const set = new ArmorSet(armorEvaluation, decoEvaluation, skillData.skillActivation)\r\n      validSets.push(set)\r\n\r\n      // exit if enough sets found\r\n      if (length === constraints.limit - 1) break\r\n      length++\r\n    }\r\n  }\r\n\r\n  return validSets\r\n}\r\n// #endregion\r\n\r\n// #region entrypoint\r\nconst search = (\r\n  armorPieces: ArmorPiece[][],\r\n  decorations: Decoration[],\r\n  charms: Charm[],\r\n  constraints: SearchConstraints,\r\n  skillData: StaticSkillData,\r\n) => {\r\n  const a = armorPieces\r\n    .map((piecesOfCategory, i) => {\r\n      return applyArmorFilter(piecesOfCategory, constraints.armorRarity, constraints.armorType, i, constraints.skillActivations)\r\n    })\r\n  const c = applyCharmFilter(charms, constraints.skillActivations)\r\n  const d = applyRarityFilter(decorations, constraints.decoRarity)\r\n    .filter(x => filterHasSkill(x, constraints.skillActivations))\r\n\r\n  return findSets(\r\n    a,\r\n    d as Decoration[],\r\n    c,\r\n    constraints,\r\n    skillData,\r\n  )\r\n}\r\n// #endregion\r\n\r\nexport { search }\r\n","import Rarity from '../../data-provider/models/equipment/Rarity'\r\nimport Slots from '../../data-provider/models/equipment/Slots'\r\nimport GlobalSettings from '../models/GlobalSettings'\r\n\r\nexport const getGlobalSettings = (): GlobalSettings => {\r\n  const armorSelect = document.getElementById('armor-type') as HTMLSelectElement\r\n  const weaponSlots = document.getElementById('weapon-slots') as HTMLSelectElement\r\n  const armorRarity = document.getElementById('armor-rarity') as HTMLSelectElement\r\n  const decoRarity = document.getElementById('deco-rarity') as HTMLSelectElement\r\n  const limit = document.getElementById('search-limit') as HTMLInputElement\r\n\r\n  return {\r\n    armorType: parseInt(armorSelect.value),\r\n    weaponSlots: parseInt(weaponSlots.value) as Slots,\r\n    armorRarity: parseInt(armorRarity.value) as Rarity,\r\n    decoRarity: parseInt(decoRarity.value) as Rarity,\r\n    limit: parseInt(limit.value),\r\n  }\r\n}\r\n","import ArmorSet from '../../searcher/models/ArmorSet'\r\nimport SearchConstraints from '../../searcher/models/SearchConstraints'\r\nimport StaticSkillData from '../../data-provider/models/skills/StaticSkillData'\r\nimport { htmlToElement } from '../../helper/html.helper'\r\nimport SkillActivation from '../../data-provider/models/skills/SkillActivation'\r\nimport SkillActivationMap from '../../data-provider/models/skills/SkillActivationMap'\r\n\r\nexport function * moreSkillsIterator (skillActivations: SkillActivationMap) {\r\n  const rContainer = clearAndGetResultsContainer()\r\n  const countDiv = document.createElement('div')\r\n  rContainer.appendChild(countDiv)\r\n\r\n  const totalActCount = Array.from(skillActivations.values())\r\n    .reduce((sum, c) => sum + c.length, 0)\r\n\r\n  for (let i = 0; i < totalActCount; i++) {\r\n    countDiv.innerHTML = `Checked ${i} possible skills ...`\r\n    yield i\r\n  }\r\n}\r\n\r\nconst onSetClick = (tbNode: Node, viewGetter: () => Node) => {\r\n  const children = tbNode.childNodes\r\n  const finalNode = children[children.length - 1] as HTMLTableRowElement\r\n\r\n  // toggle if details have already been rendered\r\n  if (finalNode.classList.contains('result-set-details')) {\r\n    finalNode.classList.toggle('hidden')\r\n    return\r\n  }\r\n\r\n  // render and append them otherwise\r\n  tbNode.appendChild(viewGetter())\r\n}\r\n\r\nconst getExpandedView = (set: ArmorSet, skillData: StaticSkillData, searchParams: SearchConstraints) => {\r\n  // build header\r\n  const header = htmlToElement(`\r\n    <tr>\r\n      <th>Skill</th>\r\n      <th style=\"width: 6%\">Weapon</th>\r\n      <th style=\"width: 6%\">Head</th>\r\n      <th style=\"width: 6%\">Chest</th>\r\n      <th style=\"width: 6%\">Arms</th>\r\n      <th style=\"width: 6%\">Waist</th>\r\n      <th style=\"width: 6%\">Legs</th>\r\n      <th style=\"width: 6%\">Charm</th>\r\n      <th style=\"width: 6%\">Deco</th>\r\n      <th style=\"width: 6%\">Total</th>\r\n      <th>Active</th>\r\n    </tr>\r\n  `)\r\n\r\n  // build skills rows\r\n  const skillRows = Array.from(set.evaluation!.skills.entries())\r\n    .sort(([_a, a], [_b, b]) => b - a)\r\n    .map(([sId, sVal]) => {\r\n      const r = document.createElement('tr')\r\n\r\n      const computedDecoValue = set.decos\r\n        .map(d => d.skills.get(sId)!)\r\n        .reduce((sum, c) => sum + c, 0)\r\n\r\n      r.appendChild(htmlToElement(`<td>${skillData.skillName.get(sId) ? skillData.skillName.get(sId)! : ''}</td>`))\r\n      r.appendChild(htmlToElement('<td></td>')) // weapon\r\n      for (const p of set.getPieces()) {\r\n        r.append(htmlToElement(`<td>${p.skills.get(sId) ? p.skills.get(sId)! : ''}</td>`))\r\n      }\r\n      r.append(htmlToElement(`<td>${set.charm.skills.get(sId) ? set.charm.skills.get(sId)! : ''}</td>`))\r\n      r.append(htmlToElement(`<td>${computedDecoValue || ''}</td>`))\r\n      r.append(htmlToElement(`<td>${sVal}</td>`))\r\n      const possibleAct = set.evaluation!.activations.find(a => a.requiredSkill === sId)\r\n      if (possibleAct) r.append(htmlToElement(`<td ${!possibleAct.isPositive ? 'class=\"neg-skill\"' : ''}}\">${possibleAct.name}</td>`))\r\n      return r\r\n    })\r\n\r\n  // build slot list\r\n  const slotRow = document.createElement('tr')\r\n  slotRow.appendChild(htmlToElement('<td>Slots</td>'))\r\n  const rawSlowList = [searchParams.weaponSlots, ...set.getPieces().map(x => x.slots), set.charm.slots]\r\n  rawSlowList.forEach(s => slotRow.appendChild(htmlToElement(`<td>${s}</td>`)))\r\n\r\n  // append elements to table\r\n  const skillTable = htmlToElement('<table class=\"result-set-skill-table\"></table>')\r\n  skillTable.appendChild(header)\r\n  skillRows.forEach(x => skillTable.appendChild(x))\r\n  skillTable.appendChild(slotRow)\r\n\r\n  // build deco list\r\n  const decoNameMap: Map<string, number> = new Map()\r\n  for (const deco of set.decos) {\r\n    const name = deco.name\r\n    decoNameMap.set(name, 1 + (decoNameMap.get(name) || 0))\r\n  }\r\n  const decoNameList = Array.from(decoNameMap.entries())\r\n    .map(([name, amount]) => `${amount} x ${name}`)\r\n  const decoNameString = decoNameList.join(', ')\r\n  const decoNameContainer = htmlToElement(`\r\n    <div><span>${decoNameString}</span></div>\r\n  `)\r\n\r\n  // return final div\r\n  const tr = htmlToElement('<tr class=\"result-set-details\"></tr>')\r\n  const td = htmlToElement('<td colspan=\"6\"\"></td>')\r\n  const d = htmlToElement('<div class=\"result-set-details-container\"></div>')\r\n  d.appendChild(skillTable)\r\n  td.appendChild(d)\r\n  tr.appendChild(td)\r\n  d.appendChild(decoNameContainer)\r\n  return tr\r\n}\r\n\r\nconst getSetElement = (set: ArmorSet, skillData: StaticSkillData, searchParams: SearchConstraints) => {\r\n  // get bonus and negative skills\r\n  const requiredActivations = searchParams.skillActivations\r\n  const unrelatedActivations = set.evaluation!.activations.filter((act) => {\r\n    return !act.isPositive || // negative skill\r\n      !requiredActivations.find(req => req.requiredSkill === act.requiredSkill) || // skill is not in required\r\n      requiredActivations.find(req => req.requiredSkill === act.requiredSkill && act.requiredPoints > req.requiredPoints) // skill is upgrade of smth required\r\n  })\r\n  const unrelatedHtmlStrings = unrelatedActivations\r\n    .sort((a, b) => b.requiredPoints - a.requiredPoints)\r\n    .map((x) => {\r\n      return `<span class=\"result-set-unrelated-skill ${!x.isPositive ? 'neg-skill' : ''}\">${x.name}</span>`\r\n    })\r\n\r\n  // get basic display components\r\n  const tb = htmlToElement('<tbody class=\"result-set\"></tbody>')\r\n  const row1 = htmlToElement(`\r\n    <tr class=\"result-set-row result-set-row1\">\r\n      <td>${set.head.name}</td>\r\n      <td>${set.chest.name}</td>\r\n      <td>${set.arms.name}</td>\r\n      <td>${set.waist.name}</td>\r\n      <td>${set.legs.name}</td>\r\n      <td>${set.charm.name}</td>\r\n    </tr>`)\r\n  const row2 = htmlToElement(`\r\n    <tr class=\"result-set-row result-set-row2\">\r\n      <td colspan=\"6\">\r\n        <p><span class=\"def\">DEF</span> <span>${set.evaluation.defense.max}</span></p>\r\n        <p><span class=\"fir\">FIR</span> <span>${set.evaluation.resistance[0]}</span></p>\r\n        <p><span class=\"wat\">WAT</span> <span>${set.evaluation.resistance[1]}</span></p>\r\n        <p><span class=\"ice\">ICE</span> <span>${set.evaluation.resistance[2]}</span></p>\r\n        <p><span class=\"thn\">THN</span> <span>${set.evaluation.resistance[3]}</span></p>\r\n        <p><span class=\"drg\">DRG</span> <span>${set.evaluation.resistance[4]}</span></p>\r\n        <span class=\"result-set-unrelated\">${unrelatedHtmlStrings.join('')}</span>\r\n      </td>\r\n    </tr>`)\r\n\r\n  // append basic display components\r\n  const getter = () => { return getExpandedView(set, skillData, searchParams) }\r\n  for (const row of [row1, row2]) {\r\n    tb.appendChild(row)\r\n    row.addEventListener('click', () => onSetClick(tb, getter))\r\n  }\r\n\r\n  return tb\r\n}\r\n\r\nconst onMoreSkillsActClick = (d: HTMLDivElement) => {\r\n  const id = parseInt(d.getAttribute('data-id')!)\r\n\r\n  for (const ele of Array.from(document.getElementsByClassName('search-picker-activation'))) {\r\n    const thisId = parseInt(ele.getAttribute('data-id')!)\r\n    if (id === thisId) {\r\n      (ele as HTMLDivElement).click()\r\n      break\r\n    }\r\n  }\r\n}\r\n\r\nconst clearAndGetResultsContainer = () => {\r\n  const resultContainer = document.getElementById('search-results')!\r\n  for (const c of Array.from(resultContainer.children)) c.remove()\r\n  return resultContainer\r\n}\r\n\r\nexport const renderMoreSkills = (activations: SkillActivation[]) => {\r\n  const resultContainer = clearAndGetResultsContainer()\r\n\r\n  if (activations.length === 0) {\r\n    resultContainer.appendChild(htmlToElement(`\r\n      <div class=\"results-banner banner\">\r\n        Can't fit more skills\r\n      <div>\r\n    `))\r\n    return\r\n  }\r\n\r\n  for (const act of activations) {\r\n    const d = htmlToElement(`<div class=\"results-more-skills-act\" data-id=\"${act.id}\"></div>`) as HTMLDivElement\r\n    d.appendChild(htmlToElement(`<span class=\"results-more-skills-act-content\">${act.name}</span>`))\r\n    d.addEventListener('click', () => { onMoreSkillsActClick(d) })\r\n    resultContainer.appendChild(d)\r\n  }\r\n}\r\n\r\nexport const renderResults = (sets: ArmorSet[], skillData: StaticSkillData, searchParams: SearchConstraints) => {\r\n  const resultContainer = clearAndGetResultsContainer()\r\n\r\n  // add search param element\r\n  resultContainer.appendChild(htmlToElement(`\r\n    <div class=\"results-title\">Results for ${searchParams.skillActivations.map(x => x.name).join(', ')} (${sets.length} matches)</div>\r\n  `))\r\n\r\n  // return if no results\r\n  if (sets.length === 0) {\r\n    resultContainer.appendChild(htmlToElement(`\r\n      <div class=\"results-banner banner\">\r\n        No matching armor sets\r\n      <div>\r\n    `))\r\n    return\r\n  }\r\n\r\n  // build table and table header\r\n  const table = htmlToElement('<table class=\"results-table\" id=\"results-table\"></table>')\r\n  const header = htmlToElement('<tr><th>Head</th><th>Torso</th><th>Arms</th><th>Waist</th><th>Legs</th><th>Charm</th></tr>')\r\n  table.appendChild(header)\r\n  resultContainer.appendChild(table)\r\n\r\n  // build and append html elements for each armor set\r\n  sets\r\n    .sort((a, b) => b.evaluation.defense.max - a.evaluation.defense.max)\r\n    .map(set => getSetElement(set, skillData, searchParams))\r\n    .forEach(ele => table.appendChild(ele))\r\n}\r\n","import UserCharmList from '../../data-provider/models/equipment/UserCharmList'\r\nimport ArmorSet from '../../searcher/models/ArmorSet'\r\nimport SearchConstraints from '../../searcher/models/SearchConstraints'\r\nimport StaticEquipmentData from '../../data-provider/models/equipment/StaticEquipmentData'\r\nimport StaticSkillData from '../../data-provider/models/skills/StaticSkillData'\r\nimport { search } from '../../searcher/searcher.module'\r\nimport { getGlobalSettings } from './global-settings.component'\r\nimport { getSkillActivations, resetSkillActivations } from './picker.component'\r\nimport { moreSkillsIterator, renderMoreSkills, renderResults } from './search-results.component'\r\nimport SkillActivation from '../../data-provider/models/skills/SkillActivation'\r\n\r\nconst arrangeSearchData = () => {\r\n  // build params\r\n  const globalSettings = getGlobalSettings()\r\n  const skillActivations = getSkillActivations()\r\n\r\n  // return if no skill selected\r\n  if (skillActivations.length === 0) {\r\n    return\r\n  }\r\n\r\n  // sanitize activation input to only include highest version of each skill\r\n  const sanitizedSkillActivations = skillActivations\r\n    .filter((thisAct, i) => {\r\n      return skillActivations.every((compareAct, j) => {\r\n        if (i === j) return true\r\n        if (thisAct.requiredSkill !== compareAct.requiredSkill) return true\r\n\r\n        return thisAct.requiredPoints >= compareAct.requiredPoints\r\n      })\r\n    })\r\n\r\n  // create search params\r\n  const searchParams: SearchConstraints = {\r\n    weaponSlots: globalSettings.weaponSlots,\r\n    armorType: globalSettings.armorType,\r\n    armorRarity: globalSettings.armorRarity,\r\n    decoRarity: globalSettings.decoRarity,\r\n    limit: Math.min(Math.max(globalSettings.limit, 1), 1000),\r\n    skillActivations: sanitizedSkillActivations,\r\n  }\r\n\r\n  return searchParams\r\n}\r\n\r\nconst searchLogic = (equData: StaticEquipmentData, skillData: StaticSkillData) => {\r\n  const searchParams = arrangeSearchData()\r\n\r\n  if (!searchParams) {\r\n    alert('Please select at least one skill')\r\n    return\r\n  }\r\n\r\n  // search for sets\r\n  const result = search(\r\n    equData.armor,\r\n    equData.decorations,\r\n    UserCharmList.Instance.get(),\r\n    searchParams,\r\n    skillData,\r\n  )\r\n\r\n  // render results\r\n  renderResults(result, skillData, searchParams)\r\n}\r\n\r\nconst moreSkillsLogic = async (equData: StaticEquipmentData, skillData: StaticSkillData) => {\r\n  const searchParams = arrangeSearchData()\r\n\r\n  if (!searchParams) {\r\n    alert('Please select at least one skill')\r\n    return\r\n  }\r\n\r\n  const charms = UserCharmList.Instance.get()\r\n\r\n  const aquirableSkills: SkillActivation[] = []\r\n\r\n  const outputIterator = moreSkillsIterator(skillData.skillActivation)\r\n\r\n  for (const actMap of skillData.skillActivation) {\r\n    const sActs = actMap[1]\r\n\r\n    const processedActs = sActs\r\n      .filter(act => act.requiredPoints >= 0)\r\n      .filter(act => !searchParams.skillActivations.map(x => x.id).includes(act.id))\r\n      .filter(act => !searchParams.skillActivations.find(x => act.requiredSkill === x.requiredSkill && act.requiredPoints < x.requiredPoints))\r\n      .sort((a, b) => a.requiredPoints - b.requiredPoints)\r\n\r\n    let breakFlag = false\r\n    for (const act of processedActs) {\r\n      outputIterator.next()\r\n      if (breakFlag) continue\r\n\r\n      const newParams: SearchConstraints = {\r\n        ...searchParams,\r\n        limit: 1,\r\n        skillActivations: searchParams.skillActivations.concat(act),\r\n      }\r\n\r\n      const r = await new Promise<ArmorSet[]>((resolve, _reject) => {\r\n        setTimeout(() => {\r\n          const innerR = search(\r\n            equData.armor,\r\n            equData.decorations,\r\n            charms,\r\n            newParams,\r\n            skillData,\r\n          )\r\n          resolve(innerR)\r\n        })\r\n      })\r\n\r\n      if (r.length === 0) breakFlag = true\r\n      else aquirableSkills.push(act)\r\n    }\r\n  }\r\n\r\n  renderMoreSkills(aquirableSkills)\r\n}\r\n\r\nconst resetLogic = () => {\r\n  resetSkillActivations()\r\n}\r\n\r\n/** attach handlers for control buttons */\r\nexport const attachControlListeners = (equData: StaticEquipmentData, skillData: StaticSkillData) => {\r\n  const searchBtn = document.getElementById('search-btn') as HTMLButtonElement\r\n  const moreSkillsBtn = document.getElementById('more-btn') as HTMLButtonElement\r\n  const resetBtn = document.getElementById('reset-btn') as HTMLButtonElement\r\n\r\n  searchBtn.addEventListener('click', () => {\r\n    searchLogic(equData, skillData)\r\n  })\r\n  moreSkillsBtn.addEventListener('click', () => {\r\n    moreSkillsLogic(equData, skillData)\r\n  })\r\n  resetBtn.addEventListener('click', () => {\r\n    resetLogic()\r\n  })\r\n}\r\n","import { getArms, getChest, getDecorations, getHead, getLegs, getSkillActivationMap, getSkillCategories, getSkillNameMap, getWaist } from '../../data-provider/data-provider.module'\r\nimport StaticSkillData from '../../data-provider/models/skills/StaticSkillData'\r\nimport { renderCharmPicker } from '../ui/charms.component'\r\nimport { initiateNavbar } from '../ui/navbar.component'\r\nimport { renderSkillPicker } from '../ui/picker.component'\r\nimport { attachControlListeners } from '../ui/search-controls.component'\r\n\r\nconst main = async () => {\r\n  // initiate static components\r\n  initiateNavbar()\r\n\r\n  // load skill data and render skill picker and charms with it\r\n  const skillData: StaticSkillData = {\r\n    skillName: await getSkillNameMap(),\r\n    skillActivation: await getSkillActivationMap(),\r\n    skillCategories: await getSkillCategories(),\r\n  }\r\n  renderSkillPicker(skillData.skillActivation, skillData.skillCategories)\r\n  renderCharmPicker(skillData.skillName, skillData.skillActivation, skillData.skillCategories)\r\n\r\n  // load remaining data\r\n  const armor = [\r\n    await getHead(),\r\n    await getChest(),\r\n    await getArms(),\r\n    await getWaist(),\r\n    await getLegs(),\r\n  ]\r\n  const decorations = await getDecorations()\r\n\r\n  // initialize search controls\r\n  attachControlListeners({ armor, decorations }, skillData)\r\n}\r\n\r\nmain()\r\n"]}